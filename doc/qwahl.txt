==============================================================================
Collection of pickers utilizing vim.ui.select                            *qwahl*

M.format_bufname({bufnr})                                 *qwahl.format_bufname*
     Return a formatted path or name for a bufnr.
     This function can be overridden to customize the formatting of paths to buffers


    Parameters: ~
        {bufnr}  (number)

    Returns: ~
        (string)


M.try()                                                              *qwahl.try*
     Takes a list of functions, tries each until one succeeds without error.
     This can be used to create fallbacks, for example, to create a function
     that uses `lsp_tags` if a LSP client is available and otherwise falls back
     to `buf_tags`:

         local q = require('qwahl')
         q.try(q.lsp_tags, q.buf_tags)


M.buf_lines()                                                  *qwahl.buf_lines*
     Display lines in the current buffer. Jump to line when selected


M.buffers()                                                      *qwahl.buffers*
     Display open buffers. Opens selected buffer in current window.


lsp_tags.opts                                                    *lsp_tags.opts*

    Fields: ~
        {kind}  (nil|string[])  filter tags by kind
        {mode}  ()


M.lsp_tags()                                                    *qwahl.lsp_tags*
     Display LSP symbols in current buffer, jump to symbol position when selected.
     @param opts nil|lsp_tags.opts


M.buf_tags()                                                    *qwahl.buf_tags*
     Displays tags ad-hoc generated using a `ctags` executable.
     Jumps to tag when selected.


M.quickfix()                                                    *qwahl.quickfix*
     Close quickfix list and show its contents using vim.ui.select.
     Jump to entry when selected.


M.jumplist()                                                    *qwahl.jumplist*
     Show jumplist. Open selected entry in current window and jump to its position.


M.tagstack()                                                    *qwahl.tagstack*
     Show tagstack. Open selected entry in current window and jump to its position


M.diagnostic({bufnr?}, {opts?})                               *qwahl.diagnostic*
     Show diagnostic and jump to the location if selected


    Parameters: ~
        {bufnr?}  (integer)                                       0 for current buffer; nil for all diagnostic
        {opts?}   ({lnum?:integer,severity?:DiagnosticSeverity})  See vim.diagnostic.get


M.spellsuggest()                                            *qwahl.spellsuggest*
     Show spelling suggestions for the word under the cursor.
     Replaces the word if a suggestion is selected


vim:tw=78:ts=8:noet:ft=help:norl:
